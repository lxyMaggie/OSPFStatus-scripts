OSPFN Testbed Status Scripts

==================================
1. Functionality
==================================
There are two PERL scripts in the package. One script (parse.pl) parses the log
files generated by OSPFN and stores prefix,
link, and timestamp information into local data files. The other script (HTML_ou
t.pl) reads the local data files and
generates an HTML page showing testbed status.


==================================
2. File List
==================================
The following is a list of files in the package along with descriptions:

configure -     This is a script for initial configuration. It gathers info from
 the user and configures the scripts and data
                files appropriately. Note: this script should only be run once f
or initial configuration, not for regular use
                as it will reset all of the local data files and erase any infor
mation stored up to that point

parse.pl -      This PERL script parses the OSPFN log files and pulls out prefix
 and link information advertised by the OSPFN
                routers. The information pulled out is stored in local data file
s. This script keeps track of the last log file
                read so there is no rereading of old log files.

HTML_out.pl -   This PERL script reads the local data files updated by parse.pl
and generates an HTML page showing the testbed
                status. The HTML is printed directly out to the terminal and not
 to a file for the purpose of using CGI.

links1 -        Local data file for storing Type 1 links advertised by routers.

links3 -        Local data file for storing Type 3 links advertised by routers.

link_timestamp- Local data file for storing the timestamp of the last advertised
 LSA by routers.

prefix -        Local data file for storing advertised prefixes, their origin, a
nd their last advertised timestamp.

topology -      Local data file representing the known topology of the testbed.
If this topology changes, then this file will
                need to be updated.

parse.conf -    Configuration file used by the PERL scripts to store directory i
nfo, the last log file read, and timezone.

cgi.sh -        A sample script file for use by a CGI script


==================================
3. Installation
==================================
Unpack the installation package. You should now have a directory "parse".

1. Go into the "parse" directory and run the configure script:

        $ cd parse
        $ ./configure

3. Enter the current full local directory. Do not add any trailing slashes to di
rectory entries (ex. /home/gus/parse)

4. Enter the directory where the OSPFN log files are located (ex. /home/gus/ospf
nLog)

5. Enter the current timezone you are in (ex. CST for Central Standard Time, etc
, MST for Mountain Standard Time, etc.)


==================================
4. Running the scripts with CGI
==================================
Edit the cgi.sh file in the "parse" directory such that parse.pl is run before H
TML_out.pl. Below is an example (use
the directories where the package was unpacked):

        #!/bin/bash
        perl /home/gus/parse/parse.pl
        perl /home/gus/parse/HTML_out.pl

Create a script in the CGI directory of the web server (ex. for Apache this is u
sually found in /usr/lib/cgi-bin) that
calls the cgi.sh script above (again use the directory where cgi.sh is located):

        #!/bin/bash
        echo "Content-type: text/html"
        echo ""
        /home/gus/parse/cgi.sh

The first two lines of the script (after the #!/bin/bash) are necessary for CGI
functionality. If they are not included,
then a browser will get errors when it tries to access the page. When a browser
accesses the location at
"YOURHOST/cgi-bin/YOURCGISCRIPT", the script that was created in the CGI directo
ry will run cgi.sh. This will
in turn run parse.pl to parse the log files and then HTML_out.pl to generate an
HTML page. The HTML page will be printed
to standard output instead of a file so that the CGI script will pass the HTML p
age directly back to the browser.


===========================================
5. Giving Apache permissions to run script
===========================================
To get Apache to recognize the scripts as cgi scripts in the cg-bin directory,
we need to add a line to the httpd.conf file. The default location of this directory
is /etc/apache2/. Once there, add the following to the httpd.conf file:

ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/


5.1. Calling scripts from local machine

Before we can run the script through the browser, we will need to give the 
Apache pseudo user access to run the script. The Apache user is usually called
"www-data". If this user does not have access, an "Internal Service Error" will
appear.

If the scripts are run on the same machine that the web server is located, 
then all we have to do is give the cgi script that calls the scripts
the correct permissions:

$ sudo chmod 750 myscript.cgi

$ sudo chown www-data myscript.cgi

Now going to "YOURHOST/cgi-bin/YOURCGISCRIPT" should run the script in the
browser.


5.2. Calling script from another machine through ssh

If the scripts are located on a remote machine, then we have to set up a 
key pair between the apache user on the web server to the user that will 
run the scripts on the remote machine. 

We will need to give the cgi script the same permissions as we did above:

$ sudo chmod 750 myscript.cgi

$ sudo chown www-data myscript.cgi

Inside the script, you will provide the path of the cgi script that runs the 2
perl scripts:

#!/bin/bash
echo "Content-type: text/html"
echo ""

ssh user@A "/home/gus/parse"

Now we have to set up the key pair so that the script can run.

1. Change user to root:

$ su root

2. Create a .ssh directory in the Apache home (this is usually /var/www/)
   and change the permissions to the Apache user. (This directory may already
   exist.)
   
$ mkdir /var/www/.ssh

$ chown -R www-data /var/www/.ssh

3. Generate the ssh-key authentication key as the Apache user. Use the default 
   file location and leave the password empty.
   
$ sudo -u www-data ssh-keygen -t rsa

  You should see something similar to:
  
  Generating public/private rsa key pair.
  Enter file in which to save the key (/var/www/.ssh/id_rsa):
  Created directory '/var/www/.ssh'.
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identification has been saved in /var/www/.ssh/id_rsa.
  Your public key has been saved in /var/www/.ssh/id_rsa.pub.
  The key fingerprint is:
  3e:4f:05:79:3a:9f:96:7c:3b:ad:e9:58:37:bc:37:e4 www-data@A
  
4. Now we have to copy the key over to user@B

$ ssh-copy-id -i /var/www/.ssh/id_rsa.pub user@B

  You will be prompted for the password of user on B. And then see:
  
  Now try logging into the machine, with "ssh 'user@B'", and check in:

  .ssh/authorized_keys

  to make sure we haven't added extra keys that you weren't expecting.
  

The Apache user will now be able to connect to user@B without the need for 
a password and successfully run the scripts.

5.3. Preventing access to .ssh directory

We created the .ssh directory in /var/www/ which will allow access to anyone. This
 not good since the directory holds the public/private key pairs. So to prevent access
to this directory, navigate to the default directory of apache (usually /etc/apache2/).
Add the following lines to the httpd.conf file:

<Directory /var/www/.ssh>
  Order Deny,Allow
  Deny from all
</Directory>
